// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: Lexico.jflex

package com.archivos.Jflex;

import com.archivos.Jcup.sym;
import java_cup.runtime.*;
import java.util.LinkedList;


@SuppressWarnings("fallthrough")
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHAR = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\1\u0400\266\u0200\10\u0500\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\1"+
    "\1\5\1\6\2\0\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\12\22\1\23"+
    "\1\24\1\25\1\26\1\27\2\0\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\41\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\41\1\56\1\41\1\57"+
    "\1\60\1\61\1\62\1\63\1\0\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\41\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\41\1\56\1\41\1\64"+
    "\1\65\1\66\7\0\1\3\252\0\2\67\115\0\1\70"+
    "\u01a8\0\2\3\u0100\0\1\71\325\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\21\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\25\1\33\2\1\1\34"+
    "\1\35\1\36\1\0\1\34\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\0\1\46\1\47\1\50\5\25"+
    "\1\51\5\25\1\0\1\52\3\25\1\0\1\25\1\53"+
    "\13\25\4\0\1\2\1\54\1\52\2\0\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\6\25\1\0"+
    "\1\65\2\25\1\66\1\0\3\25\1\0\1\67\2\25"+
    "\1\0\7\25\1\0\2\25\1\70\1\25\1\0\1\25"+
    "\4\0\1\2\2\0\3\25\1\71\2\25\1\0\2\72"+
    "\1\25\1\0\2\73\2\25\2\74\1\25\1\0\1\25"+
    "\1\0\1\75\6\25\1\0\1\25\1\0\1\76\1\77"+
    "\2\100\1\25\3\0\1\2\2\0\1\101\1\25\2\102"+
    "\1\103\1\25\1\0\1\103\2\104\3\25\1\0\1\25"+
    "\1\0\3\25\1\105\2\25\1\0\1\25\1\0\2\106"+
    "\3\0\2\25\1\0\1\25\1\107\2\110\1\25\1\0"+
    "\1\111\1\112\1\113\1\114\1\115\1\114\1\25\2\0"+
    "\1\115\1\116\1\25\1\0\1\117\2\120\1\25\1\0"+
    "\1\117\2\121\2\122";

  private static int [] zzUnpackAction() {
    int [] result = new int[259];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\256\0\350\0\u0122\0\256"+
    "\0\256\0\u015c\0\256\0\256\0\256\0\u0196\0\u01d0\0\256"+
    "\0\u020a\0\u0244\0\256\0\u027e\0\256\0\256\0\u02b8\0\u02f2"+
    "\0\u032c\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2"+
    "\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658\0\u0692"+
    "\0\u06cc\0\u0706\0\256\0\256\0\256\0\u04c2\0\u0740\0\u077a"+
    "\0\256\0\u07b4\0\u07ee\0\u0828\0\256\0\256\0\u0862\0\u089c"+
    "\0\256\0\256\0\256\0\256\0\256\0\256\0\u08d6\0\u0910"+
    "\0\256\0\256\0\256\0\u094a\0\u0984\0\u09be\0\u09f8\0\u0a32"+
    "\0\u04c2\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e\0\u04c2"+
    "\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\u04c2\0\u0cea\0\u0d24"+
    "\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\u0ef4"+
    "\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc\0\u1016\0\u0f68\0\u04c2\0\256"+
    "\0\u1050\0\u108a\0\256\0\256\0\256\0\256\0\256\0\256"+
    "\0\256\0\u0910\0\u10c4\0\u10fe\0\u1138\0\u1172\0\u11ac\0\u11e6"+
    "\0\u1220\0\u04c2\0\u125a\0\u1294\0\u04c2\0\u12ce\0\u1308\0\u1342"+
    "\0\u137c\0\u13b6\0\u04c2\0\u13f0\0\u142a\0\u1464\0\u149e\0\u14d8"+
    "\0\u1512\0\u154c\0\u1586\0\u15c0\0\u15fa\0\u1634\0\u166e\0\u16a8"+
    "\0\u04c2\0\u16e2\0\u171c\0\u1756\0\u1790\0\u17ca\0\u1804\0\u183e"+
    "\0\u1016\0\u1878\0\u18b2\0\u18ec\0\u1926\0\u1960\0\u04c2\0\u199a"+
    "\0\u19d4\0\u1a0e\0\u04c2\0\256\0\u1a48\0\u1a82\0\u04c2\0\256"+
    "\0\u1abc\0\u1af6\0\u04c2\0\256\0\u1b30\0\u1b6a\0\u1ba4\0\u1bde"+
    "\0\u04c2\0\u1c18\0\u1c52\0\u1c8c\0\u1cc6\0\u1d00\0\u1d3a\0\u1d74"+
    "\0\u1dae\0\u1de8\0\u04c2\0\u04c2\0\u04c2\0\256\0\u1e22\0\u1e5c"+
    "\0\u1e96\0\u1ed0\0\u1e96\0\u1f0a\0\u1f44\0\u04c2\0\u1f7e\0\u04c2"+
    "\0\256\0\u04c2\0\u1fb8\0\u1ff2\0\256\0\u04c2\0\256\0\u202c"+
    "\0\u2066\0\u20a0\0\u20da\0\u2114\0\u214e\0\u2188\0\u21c2\0\u21fc"+
    "\0\u04c2\0\u2236\0\u2270\0\u22aa\0\u22e4\0\u231e\0\u04c2\0\256"+
    "\0\u2358\0\u2392\0\u23cc\0\u2406\0\u2440\0\u247a\0\u24b4\0\u04c2"+
    "\0\u04c2\0\256\0\u24ee\0\u2528\0\u04c2\0\u04c2\0\u04c2\0\u04c2"+
    "\0\u04c2\0\256\0\u2562\0\u259c\0\u25d6\0\256\0\u04c2\0\u2610"+
    "\0\u264a\0\u04c2\0\u04c2\0\256\0\u2684\0\u26be\0\256\0\u04c2"+
    "\0\256\0\u04c2\0\256";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[259];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\0\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\2\40\1\41\2\40"+
    "\1\42\1\40\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\40\1\51\1\52\1\40\1\53\1\4\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\4\2\64"+
    "\1\65\1\64\1\0\1\64\1\66\51\64\1\67\11\64"+
    "\2\70\1\65\1\70\1\0\4\70\1\71\46\70\1\67"+
    "\11\70\74\0\1\5\115\0\1\72\53\0\1\73\75\0"+
    "\1\74\72\0\1\75\73\0\1\76\72\0\1\77\71\0"+
    "\1\100\1\0\1\24\75\0\1\101\71\0\1\102\71\0"+
    "\1\103\65\0\1\40\5\0\20\40\1\104\6\40\4\0"+
    "\1\40\1\0\1\40\26\0\1\40\5\0\16\40\1\105"+
    "\1\40\1\106\6\40\4\0\1\40\1\0\1\40\26\0"+
    "\1\40\5\0\7\40\1\107\6\40\1\110\10\40\4\0"+
    "\1\40\1\0\1\40\26\0\1\40\5\0\16\40\1\111"+
    "\10\40\4\0\1\40\1\0\1\40\26\0\1\40\5\0"+
    "\13\40\1\112\1\40\1\113\11\40\4\0\1\40\1\0"+
    "\1\40\26\0\1\40\5\0\1\114\7\40\1\115\5\40"+
    "\1\116\10\40\4\0\1\40\1\0\1\40\1\0\1\117"+
    "\24\0\1\40\5\0\27\40\4\0\1\40\1\0\1\40"+
    "\26\0\1\40\5\0\5\40\1\120\7\40\1\121\11\40"+
    "\4\0\1\40\1\0\1\40\26\0\1\40\5\0\4\40"+
    "\1\122\3\40\1\123\16\40\4\0\1\40\1\0\1\40"+
    "\1\0\1\124\24\0\1\40\5\0\4\40\1\125\22\40"+
    "\4\0\1\40\1\0\1\40\26\0\1\40\5\0\5\40"+
    "\1\126\21\40\4\0\1\40\1\0\1\40\26\0\1\40"+
    "\5\0\1\127\17\40\1\130\6\40\4\0\1\40\1\0"+
    "\1\40\26\0\1\40\5\0\4\40\1\131\11\40\1\132"+
    "\10\40\4\0\1\40\1\0\1\40\26\0\1\40\5\0"+
    "\22\40\1\133\4\40\4\0\1\40\1\0\1\40\26\0"+
    "\1\40\5\0\16\40\1\134\1\40\1\135\5\40\1\136"+
    "\4\0\1\40\1\0\1\40\26\0\1\40\5\0\1\137"+
    "\15\40\1\140\10\40\4\0\1\40\1\0\1\40\26\0"+
    "\1\40\5\0\7\40\1\141\17\40\4\0\1\40\1\0"+
    "\1\40\4\0\2\142\1\143\1\142\1\144\7\142\1\145"+
    "\51\142\1\146\3\142\22\0\1\40\5\0\27\40\4\0"+
    "\1\40\1\0\1\147\41\0\1\150\7\0\1\151\76\0"+
    "\1\152\17\0\2\64\1\0\1\64\1\0\1\64\1\0"+
    "\51\64\1\0\11\64\6\0\1\153\2\0\1\154\33\0"+
    "\1\155\2\0\1\156\1\0\1\157\5\0\1\160\11\0"+
    "\2\70\1\0\1\70\1\0\4\70\1\0\46\70\1\0"+
    "\11\70\20\0\1\161\73\0\1\162\71\0\1\40\5\0"+
    "\20\40\1\163\6\40\4\0\1\40\1\0\1\40\26\0"+
    "\1\40\5\0\16\40\1\164\10\40\4\0\1\40\1\0"+
    "\1\40\26\0\1\40\5\0\4\40\1\165\22\40\4\0"+
    "\1\40\1\0\1\40\26\0\1\40\5\0\1\166\26\40"+
    "\4\0\1\40\1\0\1\40\26\0\1\40\5\0\15\40"+
    "\1\167\11\40\4\0\1\40\1\0\1\40\26\0\1\40"+
    "\5\0\21\40\1\170\5\40\4\0\1\40\1\0\1\40"+
    "\2\0\1\171\23\0\1\40\5\0\3\40\1\172\23\40"+
    "\4\0\1\40\1\0\1\40\26\0\1\40\5\0\13\40"+
    "\1\173\13\40\4\0\1\40\1\0\1\40\26\0\1\40"+
    "\5\0\15\40\1\174\11\40\4\0\1\40\1\0\1\40"+
    "\26\0\1\40\5\0\20\40\1\175\6\40\4\0\1\40"+
    "\1\0\1\40\51\0\1\176\46\0\1\40\5\0\22\40"+
    "\1\177\4\40\4\0\1\40\1\0\1\40\26\0\1\40"+
    "\5\0\15\40\1\200\11\40\4\0\1\40\1\0\1\40"+
    "\26\0\1\40\5\0\21\40\1\201\5\40\4\0\1\40"+
    "\1\0\1\40\2\0\1\202\52\0\1\202\16\0\1\202"+
    "\23\0\1\40\5\0\25\40\1\203\1\40\4\0\1\40"+
    "\1\0\1\40\26\0\1\40\5\0\2\40\1\204\24\40"+
    "\4\0\1\40\1\0\1\40\26\0\1\40\5\0\10\40"+
    "\1\205\16\40\4\0\1\40\1\0\1\40\1\0\1\206"+
    "\24\0\1\40\5\0\1\207\1\40\1\210\11\40\1\211"+
    "\5\40\1\212\4\40\4\0\1\40\1\0\1\40\26\0"+
    "\1\40\5\0\23\40\1\213\3\40\4\0\1\40\1\0"+
    "\1\40\26\0\1\40\5\0\20\40\1\214\6\40\4\0"+
    "\1\40\1\0\1\40\26\0\1\40\5\0\21\40\1\215"+
    "\5\40\4\0\1\40\1\0\1\40\2\0\1\216\23\0"+
    "\1\40\5\0\23\40\1\217\3\40\4\0\1\40\1\0"+
    "\1\40\26\0\1\40\5\0\17\40\1\220\7\40\4\0"+
    "\1\40\1\0\1\40\26\0\1\40\5\0\20\40\1\221"+
    "\6\40\4\0\1\40\1\0\1\40\26\0\1\40\5\0"+
    "\10\40\1\222\16\40\4\0\1\40\1\0\1\40\1\0"+
    "\1\223\24\0\1\40\5\0\10\40\1\224\16\40\4\0"+
    "\1\40\1\0\1\40\1\0\1\225\2\0\2\142\1\143"+
    "\1\142\1\144\61\142\1\146\3\142\66\0\1\5\5\0"+
    "\1\143\63\0\1\5\3\0\2\145\1\226\1\145\1\227"+
    "\7\145\1\230\51\145\1\231\3\145\52\0\1\232\67\0"+
    "\1\233\43\0\1\40\5\0\1\234\26\40\4\0\1\40"+
    "\1\0\1\40\26\0\1\40\5\0\13\40\1\235\13\40"+
    "\4\0\1\40\1\0\1\40\26\0\1\40\5\0\1\236"+
    "\26\40\4\0\1\40\1\0\1\40\26\0\1\40\5\0"+
    "\20\40\1\237\6\40\4\0\1\40\1\0\1\40\26\0"+
    "\1\40\5\0\21\40\1\240\1\241\4\40\4\0\1\40"+
    "\1\0\1\40\2\0\1\242\23\0\1\40\5\0\4\40"+
    "\1\243\22\40\4\0\1\40\1\0\1\40\40\0\1\244"+
    "\57\0\1\40\5\0\21\40\1\245\5\40\4\0\1\40"+
    "\1\0\1\40\2\0\1\246\23\0\1\40\5\0\3\40"+
    "\1\247\23\40\4\0\1\40\1\0\1\40\37\0\1\250"+
    "\60\0\1\40\5\0\4\40\1\251\22\40\4\0\1\40"+
    "\1\0\1\40\26\0\1\40\5\0\6\40\1\252\20\40"+
    "\4\0\1\40\1\0\1\40\26\0\1\40\5\0\22\40"+
    "\1\253\4\40\4\0\1\40\1\0\1\40\56\0\1\254"+
    "\41\0\1\40\5\0\12\40\1\255\14\40\4\0\1\40"+
    "\1\0\1\40\3\0\1\256\22\0\1\40\5\0\15\40"+
    "\1\257\11\40\4\0\1\40\1\0\1\40\51\0\1\260"+
    "\46\0\1\40\5\0\13\40\1\261\13\40\4\0\1\40"+
    "\1\0\1\40\26\0\1\40\5\0\16\40\1\262\10\40"+
    "\4\0\1\40\1\0\1\40\26\0\1\40\5\0\16\40"+
    "\1\263\10\40\4\0\1\40\1\0\1\40\26\0\1\40"+
    "\5\0\23\40\1\264\3\40\4\0\1\40\1\0\1\40"+
    "\26\0\1\40\5\0\15\40\1\265\11\40\4\0\1\40"+
    "\1\0\1\40\26\0\1\40\5\0\10\40\1\266\12\40"+
    "\1\267\3\40\4\0\1\40\1\0\1\40\1\0\1\270"+
    "\24\0\1\40\5\0\22\40\1\271\4\40\4\0\1\40"+
    "\1\0\1\40\56\0\1\272\41\0\1\40\5\0\4\40"+
    "\1\273\22\40\4\0\1\40\1\0\1\40\26\0\1\40"+
    "\5\0\4\40\1\274\22\40\4\0\1\40\1\0\1\40"+
    "\26\0\1\40\5\0\3\40\1\275\23\40\4\0\1\40"+
    "\1\0\1\40\37\0\1\276\60\0\1\40\5\0\13\40"+
    "\1\277\13\40\4\0\1\40\1\0\1\40\47\0\1\300"+
    "\26\0\14\301\1\302\51\301\1\303\5\301\1\226\11\301"+
    "\1\302\51\301\1\303\3\301\2\145\1\226\1\145\1\227"+
    "\7\145\1\230\4\145\1\142\44\145\1\231\3\145\34\0"+
    "\1\304\75\0\1\270\12\0\1\305\13\0\1\270\24\0"+
    "\1\40\5\0\26\40\1\306\4\0\1\40\1\0\1\40"+
    "\26\0\1\40\5\0\4\40\1\307\22\40\4\0\1\40"+
    "\1\0\1\40\26\0\1\40\5\0\12\40\1\310\14\40"+
    "\4\0\1\40\1\0\1\40\3\0\1\311\22\0\1\40"+
    "\5\0\22\40\1\312\4\40\4\0\1\40\1\0\1\40"+
    "\26\0\1\40\5\0\10\40\1\313\16\40\4\0\1\40"+
    "\1\0\1\40\1\0\1\314\54\0\1\315\41\0\1\40"+
    "\5\0\4\40\1\316\22\40\4\0\1\40\1\0\1\40"+
    "\40\0\1\317\57\0\1\40\5\0\6\40\1\320\20\40"+
    "\4\0\1\40\1\0\1\40\26\0\1\40\5\0\22\40"+
    "\1\321\4\40\4\0\1\40\1\0\1\40\26\0\1\40"+
    "\5\0\4\40\1\322\22\40\4\0\1\40\1\0\1\40"+
    "\40\0\1\323\57\0\1\40\5\0\22\40\1\324\4\40"+
    "\4\0\1\40\1\0\1\40\56\0\1\325\41\0\1\40"+
    "\5\0\20\40\1\326\6\40\4\0\1\40\1\0\1\40"+
    "\26\0\1\40\5\0\24\40\1\327\2\40\4\0\1\40"+
    "\1\0\1\40\26\0\1\40\5\0\20\40\1\330\6\40"+
    "\4\0\1\40\1\0\1\40\26\0\1\40\5\0\3\40"+
    "\1\331\23\40\4\0\1\40\1\0\1\40\26\0\1\40"+
    "\5\0\15\40\1\332\11\40\4\0\1\40\1\0\1\40"+
    "\26\0\1\40\5\0\2\40\1\333\24\40\4\0\1\40"+
    "\1\0\1\40\51\0\1\334\46\0\1\40\5\0\20\40"+
    "\1\335\6\40\4\0\1\40\1\0\1\40\54\0\1\336"+
    "\43\0\1\40\5\0\4\40\1\337\22\40\4\0\1\40"+
    "\1\0\1\40\40\0\1\340\35\0\14\301\1\302\71\301"+
    "\1\341\4\301\1\0\44\301\1\303\3\301\36\0\1\342"+
    "\65\0\1\343\61\0\1\40\5\0\1\344\26\40\4\0"+
    "\1\40\1\0\1\40\26\0\1\40\5\0\15\40\1\345"+
    "\11\40\4\0\1\40\1\0\1\40\51\0\1\346\46\0"+
    "\1\40\5\0\4\40\1\347\22\40\4\0\1\40\1\0"+
    "\1\40\26\0\1\40\5\0\7\40\1\350\17\40\4\0"+
    "\1\40\1\0\1\40\26\0\1\40\5\0\3\40\1\351"+
    "\23\40\4\0\1\40\1\0\1\40\37\0\1\352\60\0"+
    "\1\40\5\0\13\40\1\353\13\40\4\0\1\40\1\0"+
    "\1\40\47\0\1\354\50\0\1\40\5\0\3\40\1\355"+
    "\23\40\4\0\1\40\1\0\1\40\26\0\1\40\5\0"+
    "\4\40\1\356\22\40\4\0\1\40\1\0\1\40\26\0"+
    "\1\40\5\0\15\40\1\357\11\40\4\0\1\40\1\0"+
    "\1\40\26\0\1\40\5\0\6\40\1\360\20\40\4\0"+
    "\1\40\1\0\1\40\26\0\1\40\5\0\22\40\1\361"+
    "\4\40\4\0\1\40\1\0\1\40\42\0\1\362\55\0"+
    "\1\40\5\0\10\40\1\363\16\40\4\0\1\40\1\0"+
    "\1\40\1\0\1\364\42\0\1\364\26\0\1\364\2\0"+
    "\14\301\1\341\4\301\1\0\50\301\34\0\1\365\107\0"+
    "\1\366\41\0\1\40\5\0\15\40\1\367\11\40\4\0"+
    "\1\40\1\0\1\40\26\0\1\40\5\0\23\40\1\370"+
    "\3\40\4\0\1\40\1\0\1\40\57\0\1\371\40\0"+
    "\1\40\5\0\20\40\1\372\6\40\4\0\1\40\1\0"+
    "\1\40\26\0\1\40\5\0\15\40\1\373\11\40\4\0"+
    "\1\40\1\0\1\40\51\0\1\374\46\0\1\40\5\0"+
    "\15\40\1\375\11\40\4\0\1\40\1\0\1\40\51\0"+
    "\1\376\74\0\1\377\43\0\1\40\5\0\4\40\1\u0100"+
    "\22\40\4\0\1\40\1\0\1\40\40\0\1\u0101\57\0"+
    "\1\40\5\0\6\40\1\u0102\20\40\4\0\1\40\1\0"+
    "\1\40\42\0\1\u0103\33\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[9976];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\2\1\2\11\1\1\3\11\2\1\1\11"+
    "\2\1\1\11\1\1\2\11\24\1\3\11\3\1\1\11"+
    "\3\1\2\11\1\0\1\1\6\11\1\1\1\0\3\11"+
    "\13\1\1\0\4\1\1\0\15\1\4\0\2\1\1\11"+
    "\2\0\7\11\7\1\1\0\4\1\1\0\3\1\1\0"+
    "\3\1\1\0\7\1\1\0\4\1\1\0\1\1\4\0"+
    "\1\1\2\0\6\1\1\0\1\1\1\11\1\1\1\0"+
    "\1\1\1\11\3\1\1\11\1\1\1\0\1\1\1\0"+
    "\7\1\1\0\1\1\1\0\3\1\1\11\1\1\3\0"+
    "\1\1\2\0\3\1\1\11\2\1\1\0\1\11\1\1"+
    "\1\11\3\1\1\0\1\1\1\0\6\1\1\0\1\1"+
    "\1\0\1\1\1\11\3\0\2\1\1\0\3\1\1\11"+
    "\1\1\1\0\5\1\1\11\1\1\2\0\1\11\2\1"+
    "\1\0\2\1\1\11\1\1\1\0\1\11\1\1\1\11"+
    "\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[259];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    //public LinkedList<Errores> listaErrores = new LinkedList<>();

    StringBuffer string = new StringBuffer();

    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }

    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
      yyline = 1;
    yycolumn = 0;
    //listaErrores = new LinkedList<>();
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { //listaErrores.add(new Errores("LEXICO","El caracter "+ yytext()+" NO pertenece al lenguaje", yyline, yycolumn));

    System.err.println("Error léxico: Carácter no válido '" + yytext() + "' en la línea " + yyline + ", columna " + yycolumn);
            }
          // fall through
          case 83: break;
          case 2:
            { 
            }
          // fall through
          case 84: break;
          case 3:
            { return new Symbol(sym.NOT, yyline,yycolumn, yytext());
            }
          // fall through
          case 85: break;
          case 4:
            { string.setLength(0); yybegin(STRING);
            }
          // fall through
          case 86: break;
          case 5:
            { return new Symbol(sym.MOD, yyline,yycolumn, yytext());
            }
          // fall through
          case 87: break;
          case 6:
            { string.setLength(0); yybegin(CHAR);
            }
          // fall through
          case 88: break;
          case 7:
            { return new Symbol(sym.PARA, yyline,yycolumn, yytext());
            }
          // fall through
          case 89: break;
          case 8:
            { return new Symbol(sym.PARC, yyline,yycolumn, yytext());
            }
          // fall through
          case 90: break;
          case 9:
            { return new Symbol(sym.MULTI, yyline,yycolumn, yytext());
            }
          // fall through
          case 91: break;
          case 10:
            { return new Symbol(sym.SUMA, yyline,yycolumn, yytext());
            }
          // fall through
          case 92: break;
          case 11:
            { return new Symbol(sym.COMA, yyline,yycolumn, yytext());
            }
          // fall through
          case 93: break;
          case 12:
            { return new Symbol(sym.RESTA, yyline,yycolumn, yytext());
            }
          // fall through
          case 94: break;
          case 13:
            { return new Symbol(sym.PUNTO, yyline,yycolumn, yytext());
            }
          // fall through
          case 95: break;
          case 14:
            { return new Symbol(sym.DIV, yyline,yycolumn, yytext());
            }
          // fall through
          case 96: break;
          case 15:
            { return new Symbol(sym.ENTERO, yyline,yycolumn, yytext());
            }
          // fall through
          case 97: break;
          case 16:
            { return new Symbol(sym.DOBP, yyline,yycolumn, yytext());
            }
          // fall through
          case 98: break;
          case 17:
            { return new Symbol(sym.CIERRE, yyline,yycolumn, yytext());
            }
          // fall through
          case 99: break;
          case 18:
            { return new Symbol(sym.MENORQ, yyline,yycolumn, yytext());
            }
          // fall through
          case 100: break;
          case 19:
            { return new Symbol(sym.IGUAL, yyline,yycolumn, yytext());
            }
          // fall through
          case 101: break;
          case 20:
            { return new Symbol(sym.MAYORQ, yyline,yycolumn, yytext());
            }
          // fall through
          case 102: break;
          case 21:
            { return new Symbol(sym.ID, yyline,yycolumn, yytext());
            }
          // fall through
          case 103: break;
          case 22:
            { return new Symbol(sym.CORA, yyline,yycolumn, yytext());
            }
          // fall through
          case 104: break;
          case 23:
            { return new Symbol(sym.CORC, yyline,yycolumn, yytext());
            }
          // fall through
          case 105: break;
          case 24:
            { return new Symbol(sym.XOR, yyline,yycolumn, yytext());
            }
          // fall through
          case 106: break;
          case 25:
            { return new Symbol(sym.DEFAULT, yyline,yycolumn, yytext());
            }
          // fall through
          case 107: break;
          case 26:
            { return new Symbol(sym.LLAVEA, yyline,yycolumn, yytext());
            }
          // fall through
          case 108: break;
          case 27:
            { return new Symbol(sym.LLAVEC, yyline,yycolumn, yytext());
            }
          // fall through
          case 109: break;
          case 28:
            { string.append( yytext() );
            }
          // fall through
          case 110: break;
          case 29:
            { string.append(yytext());
            }
          // fall through
          case 111: break;
          case 30:
            { yybegin(YYINITIAL); return new Symbol(sym.STRING_LITERAL, string.toString());
            }
          // fall through
          case 112: break;
          case 31:
            { yybegin(YYINITIAL); return new Symbol(sym.CHAR_LITERAL, string.toString());
            }
          // fall through
          case 113: break;
          case 32:
            { return new Symbol(sym.DIFIGUAL, yyline,yycolumn, yytext());
            }
          // fall through
          case 114: break;
          case 33:
            { return new Symbol(sym.AND, yyline,yycolumn, yytext());
            }
          // fall through
          case 115: break;
          case 34:
            { return new Symbol(sym.POTENCIA, yyline,yycolumn, yytext());
            }
          // fall through
          case 116: break;
          case 35:
            { return new Symbol(sym.INCRE, yyline,yycolumn, yytext());
            }
          // fall through
          case 117: break;
          case 36:
            { return new Symbol(sym.DECRE, yyline,yycolumn, yytext());
            }
          // fall through
          case 118: break;
          case 37:
            { return new Symbol(sym.RANGO, yyline,yycolumn, yytext());
            }
          // fall through
          case 119: break;
          case 38:
            { return new Symbol(sym.MENORIGQ, yyline,yycolumn, yytext());
            }
          // fall through
          case 120: break;
          case 39:
            { return new Symbol(sym.IGUALIGUAL, yyline,yycolumn, yytext());
            }
          // fall through
          case 121: break;
          case 40:
            { return new Symbol(sym.MAYORIGQ, yyline,yycolumn, yytext());
            }
          // fall through
          case 122: break;
          case 41:
            { return new Symbol(sym.DO, yyline,yycolumn, yytext());
            }
          // fall through
          case 123: break;
          case 42:
            { return new Symbol(sym.IF, yyline,yycolumn, yytext());
            }
          // fall through
          case 124: break;
          case 43:
            { return new Symbol(sym.OF, yyline,yycolumn, yytext());
            }
          // fall through
          case 125: break;
          case 44:
            { return new Symbol(sym.OR, yyline,yycolumn, yytext());
            }
          // fall through
          case 126: break;
          case 45:
            { string.append("\"");
            }
          // fall through
          case 127: break;
          case 46:
            { string.append("\'");
            }
          // fall through
          case 128: break;
          case 47:
            { string.append("\n");
            }
          // fall through
          case 129: break;
          case 48:
            { string.append('\r');
            }
          // fall through
          case 130: break;
          case 49:
            { string.append("\t");
            }
          // fall through
          case 131: break;
          case 50:
            { string.append("\\");
            }
          // fall through
          case 132: break;
          case 51:
            { return new Symbol(sym.SUBRANGO, yyline,yycolumn, yytext());
            }
          // fall through
          case 133: break;
          case 52:
            { return new Symbol(sym.DECIMAL, yyline,yycolumn, yytext());
            }
          // fall through
          case 134: break;
          case 53:
            { return new Symbol(sym.END, yyline,yycolumn, yytext());
            }
          // fall through
          case 135: break;
          case 54:
            { return new Symbol(sym.FOR, yyline,yycolumn, yytext());
            }
          // fall through
          case 136: break;
          case 55:
            { return new Symbol(sym.NEW, yyline,yycolumn, yytext());
            }
          // fall through
          case 137: break;
          case 56:
            { return new Symbol(sym.VAR, yyline,yycolumn, yytext());
            }
          // fall through
          case 138: break;
          case 57:
            { return new Symbol(sym.CHAR, yyline,yycolumn, yytext());
            }
          // fall through
          case 139: break;
          case 58:
            { return new Symbol(sym.ELSE, yyline,yycolumn, yytext());
            }
          // fall through
          case 140: break;
          case 59:
            { return new Symbol(sym.FIND, yyline,yycolumn, yytext());
            }
          // fall through
          case 141: break;
          case 60:
            { return new Symbol(sym.LIST, yyline,yycolumn, yytext());
            }
          // fall through
          case 142: break;
          case 61:
            { return new Symbol(sym.REAL, yyline,yycolumn, yytext());
            }
          // fall through
          case 143: break;
          case 62:
            { return new Symbol(sym.TRUE, yyline,yycolumn, yytext());
            }
          // fall through
          case 144: break;
          case 63:
            { return new Symbol(sym.TYPE, yyline,yycolumn, yytext());
            }
          // fall through
          case 145: break;
          case 64:
            { return new Symbol(sym.VOID, yyline,yycolumn, yytext());
            }
          // fall through
          case 146: break;
          case 65:
            { return new Symbol(sym.ARRAY, yyline,yycolumn, yytext());
            }
          // fall through
          case 147: break;
          case 66:
            { return new Symbol(sym.BREAK, yyline,yycolumn, yytext());
            }
          // fall through
          case 148: break;
          case 67:
            { return new Symbol(sym.CONST, yyline,yycolumn, yytext());
            }
          // fall through
          case 149: break;
          case 68:
            { return new Symbol(sym.FALSE, yyline,yycolumn, yytext());
            }
          // fall through
          case 150: break;
          case 69:
            { return new Symbol(sym.ROUND, yyline,yycolumn, yytext());
            }
          // fall through
          case 151: break;
          case 70:
            { return new Symbol(sym.WHILE, yyline,yycolumn, yytext());
            }
          // fall through
          case 152: break;
          case 71:
            { return new Symbol(sym.LENGHT, yyline,yycolumn, yytext());
            }
          // fall through
          case 153: break;
          case 72:
            { return new Symbol(sym.PACKED, yyline,yycolumn, yytext());
            }
          // fall through
          case 154: break;
          case 73:
            { return new Symbol(sym.RECORD, yyline,yycolumn, yytext());
            }
          // fall through
          case 155: break;
          case 74:
            { return new Symbol(sym.REMOVE, yyline,yycolumn, yytext());
            }
          // fall through
          case 156: break;
          case 75:
            { return new Symbol(sym.RETURN, yyline,yycolumn, yytext());
            }
          // fall through
          case 157: break;
          case 76:
            { return new Symbol(sym.CADENA, yyline,yycolumn, yytext());
            }
          // fall through
          case 158: break;
          case 77:
            { return new Symbol(sym.STRUCT, yyline,yycolumn, yytext());
            }
          // fall through
          case 159: break;
          case 78:
            { return new Symbol(sym.BOOL, yyline,yycolumn, yytext());
            }
          // fall through
          case 160: break;
          case 79:
            { return new Symbol(sym.INT, yyline,yycolumn, yytext());
            }
          // fall through
          case 161: break;
          case 80:
            { return new Symbol(sym.IMPRIMIR, yyline,yycolumn, yytext());
            }
          // fall through
          case 162: break;
          case 81:
            { return new Symbol(sym.CONTINUE, yyline,yycolumn, yytext());
            }
          // fall through
          case 163: break;
          case 82:
            { return new Symbol(sym.TOSTRING, yyline,yycolumn, yytext());
            }
          // fall through
          case 164: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
